plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.5.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = rootProject.property("nostr-java.group")
version = rootProject.property("nostr-java.version")
description = rootProject.property("nostr-java.description")

repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
}

publishing {
    publications {
        nostrjava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

dependencies {
    def apacheCommonsLang3 = rootProject.property("nostr-java.apacheCommonsLang3")
    def jacksonModuleAfterburner = rootProject.property("nostr-java.jacksonModuleAfterburner")
    def bouncyCastle = rootProject.property("nostr-java.bouncyCastle")
    def lombok = rootProject.property("nostr-java.lombok")
    def googleGuava = rootProject.property("nostr-java.googleGuava")

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:' + jacksonModuleAfterburner
    implementation 'org.bouncycastle:bcprov-jdk18on:' + bouncyCastle
    implementation 'org.projectlombok:lombok:' + lombok
    implementation 'org.apache.commons:commons-lang3:' + apacheCommonsLang3

    annotationProcessor 'org.projectlombok:lombok:' + lombok

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.projectlombok:lombok:' + lombok
    testImplementation 'com.google.guava:guava:' + googleGuava

    testAnnotationProcessor 'org.projectlombok:lombok:' + lombok
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.bootJar {
    enabled = true
}

tasks.jar {
    archiveClassifier = ''
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}
